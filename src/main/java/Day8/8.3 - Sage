The Saga design pattern is a way to manage data consistency across microservices in
distributed transaction scenarios. A saga is a sequence of transactions that updates
each service and publishes a message or event to trigger the next transaction step.
If a step fails, the saga executes compensating transactions that counteract the preceding transactions.

The Saga pattern provides transaction management using a sequence of local transactions.
A local transaction is the atomic work effort performed by a saga participant. Each local
transaction updates the database and publishes a message or event to trigger the next local
transaction in the saga. If a local transaction fails, the saga executes a series of
compensating transactions that undo the changes that were made by the preceding local transactions.

